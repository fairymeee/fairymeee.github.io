<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fairymeee</title>
  
  <subtitle>性空山</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fairymeee.github.io/"/>
  <updated>2018-08-14T15:12:25.457Z</updated>
  <id>https://fairymeee.github.io/</id>
  
  <author>
    <name>fairymeee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>持续集成：Gogs+Jenkins远程服务器文件同步</title>
    <link href="https://fairymeee.github.io/2018/07/06/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%9AGogs+Jenkins%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5/"/>
    <id>https://fairymeee.github.io/2018/07/06/持续集成：Gogs+Jenkins远程服务器文件同步/</id>
    <published>2018-07-06T03:48:39.000Z</published>
    <updated>2018-08-14T15:12:25.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Gogs配置"><a href="#1-Gogs配置" class="headerlink" title="1. Gogs配置"></a>1. Gogs配置</h2><h3 id="1-1-仓库设置（仓库管理员）"><a href="#1-1-仓库设置（仓库管理员）" class="headerlink" title="1.1 仓库设置（仓库管理员）"></a>1.1 仓库设置（仓库管理员）</h3><p><img src="http://g-search3.alicdn.com/img/bao/uploaded/i4/TB182IxkyAnBKNjSZFvXXaTKXXa" alt="Git仓库"></p><h3 id="1-2-添加Web钩子"><a href="#1-2-添加Web钩子" class="headerlink" title="1.2 添加Web钩子"></a>1.2 添加Web钩子</h3><p><img src="http://g-search3.alicdn.com/img/bao/uploaded/i4/TB1Rc.dDeySBuNjy1zdXXXPxFXa" alt="web钩子"></p><h3 id="1-3-Web钩子配置"><a href="#1-3-Web钩子配置" class="headerlink" title="1.3 Web钩子配置"></a>1.3 Web钩子配置</h3><p><img src="http://g-search1.alicdn.com/img/bao/uploaded/i4/TB1EVl9kAZmBKNjSZPiXXXFNVXa" alt="webhook配置"></p><blockquote><p>推送地址：http://[jenkins-server]/gogs-webhook/?job=[jenkins的job名称]</p><p>密钥文本：jenkins的job需要配置密钥才能连接</p></blockquote><h2 id="2-Jenkins配置"><a href="#2-Jenkins配置" class="headerlink" title="2. Jenkins配置"></a>2. Jenkins配置</h2><h3 id="2-1-安装插件"><a href="#2-1-安装插件" class="headerlink" title="2.1 安装插件"></a>2.1 安装插件</h3><ul><li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Gogs+Webhook+Plugin" target="_blank" rel="noopener">Gogs plugin</a></li><li><a href="http://wiki.jenkins-ci.org/display/JENKINS/Publish+Over+SSH+Plugin" target="_blank" rel="noopener">Publish Over SSH</a></li></ul><blockquote><p>系统管理-&gt;插件管理-&gt;可选插件，直接搜索，点击“直接安装”即可。</p></blockquote><h3 id="2-2-SSH设置"><a href="#2-2-SSH设置" class="headerlink" title="2.2 SSH设置"></a>2.2 SSH设置</h3><p><img src="http://g-search1.alicdn.com/img/bao/uploaded/i4/TB1iOXukScqBKNjSZFgXXX_kXXa" alt="ssh设置"></p><blockquote><p>系统管理-&gt;系统设置</p></blockquote><h3 id="2-3-新建Job"><a href="#2-3-新建Job" class="headerlink" title="2.3 新建Job"></a>2.3 新建Job</h3><p><img src="http://g-search2.alicdn.com/img/bao/uploaded/i4/TB1gam_kCMmBKNjSZTEXXasKpXa" alt="新建job"></p><blockquote><p>填写job名称，选择“构建一个自由风格的软件项目”</p></blockquote><h3 id="2-4-Job配置"><a href="#2-4-Job配置" class="headerlink" title="2.4 Job配置"></a>2.4 Job配置</h3><ul><li>General</li></ul><p><img src="http://g-search3.alicdn.com/img/bao/uploaded/i4/TB1FcJrDxWYBuNjy1zkXXXGGpXa" alt="General"></p><blockquote><p>项目名称即为job名称，如需更改，请保持gogs web钩子的推送地址中job与此一致</p></blockquote><ul><li>Gogs Webhook</li></ul><p><img src="http://g-search1.alicdn.com/img/bao/uploaded/i4/TB1n0kYkpkoBKNjSZFEXXbrEVXa" alt="Gogs Webhook"></p><blockquote><p>如果gogs web钩子设置了密钥，就需要勾选“Use Gogs secret”，并填写Secret</p></blockquote><ul><li>源码管理</li></ul><p><img src="http://g-search3.alicdn.com/img/bao/uploaded/i4/TB1f9SdksIrBKNjSZK9XXagoVXa" alt="源码管理"></p><blockquote><p>点击“Add”添加账号密码信息，填写Username和Password</p></blockquote><ul><li>构建触发器</li></ul><p><img src="http://g-search3.alicdn.com/img/bao/uploaded/i4/TB1d8vpktcnBKNjSZR0XXcFqFXa" alt="构建触发器"></p><ul><li><p>构建</p><p><strong>选择Send files or execute commands over SSH</strong></p></li></ul><p><img src="http://g-search1.alicdn.com/img/bao/uploaded/i4/TB1uAOYDXmWBuNjSspdXXbugXXa" alt="构建"></p><blockquote><p>“<strong>*</strong>”表示复制当前仓库下所有文件</p></blockquote><p>附脚本（复制，同名则备份）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">upload_dir=/home/<span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line">www_dir=/home/test1/</span><br><span class="line"></span><br><span class="line">backupexist()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">filelist=`ls <span class="variable">$1</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$filelist</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f <span class="variable">$1</span><span class="variable">$file</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f <span class="variable">$2</span><span class="variable">$file</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">cp <span class="variable">$2</span><span class="variable">$file</span> <span class="variable">$2</span><span class="variable">$file</span><span class="string">"."</span>`date +%Y-%m-%d`<span class="string">".del"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">backupexist <span class="variable">$1</span><span class="variable">$file</span><span class="string">"/"</span> <span class="variable">$2</span><span class="variable">$file</span><span class="string">"/"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backupexist <span class="variable">$upload_dir</span> <span class="variable">$www_dir</span></span><br><span class="line"></span><br><span class="line">cp -R <span class="variable">$upload_dir</span><span class="string">"."</span> <span class="variable">$www_dir</span></span><br></pre></td></tr></table></figure><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><h3 id="1-触发-Web-钩子"><a href="#1-触发-Web-钩子" class="headerlink" title="1. 触发 Web 钩子"></a>1. 触发 Web 钩子</h3><ul><li>测试推送</li></ul><p><img src="http://g-search3.alicdn.com/img/bao/uploaded/i4/TB1SIuhaNtnkeRjSZSgXXXAuXXa" alt="测试推送"></p><ul><li>git push命令触发</li></ul><h3 id="2-Jenkins-Job状态"><a href="#2-Jenkins-Job状态" class="headerlink" title="2. Jenkins Job状态"></a>2. Jenkins Job状态</h3><p><img src="http://g-search3.alicdn.com/img/bao/uploaded/i4/TB1_npzDxWYBuNjy1zkXXXGGpXa" alt="Jenkins Job状态"></p><blockquote><ul><li>蓝色：任务最近一次构建是成功的</li><li>红色：任务最后一次构建是失败的</li><li>黄色：任务最后一次构建表示成功了，但不稳定（主要是因为有失败的测试）</li><li>灰色：任务从未被执行过或被禁用了</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Gogs配置&quot;&gt;&lt;a href=&quot;#1-Gogs配置&quot; class=&quot;headerlink&quot; title=&quot;1. Gogs配置&quot;&gt;&lt;/a&gt;1. Gogs配置&lt;/h2&gt;&lt;h3 id=&quot;1-1-仓库设置（仓库管理员）&quot;&gt;&lt;a href=&quot;#1-1-仓库设置（仓库管
      
    
    </summary>
    
      <category term="持续集成CI" scheme="https://fairymeee.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90CI/"/>
    
    
      <category term="Gogs" scheme="https://fairymeee.github.io/tags/Gogs/"/>
    
      <category term="Jenkins" scheme="https://fairymeee.github.io/tags/Jenkins/"/>
    
      <category term="CI" scheme="https://fairymeee.github.io/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>解决Redis连接异常</title>
    <link href="https://fairymeee.github.io/2018/06/07/%E8%A7%A3%E5%86%B3Redis%E8%BF%9E%E6%8E%A5%E5%BC%82%E5%B8%B8/"/>
    <id>https://fairymeee.github.io/2018/06/07/解决Redis连接异常/</id>
    <published>2018-06-07T08:25:08.000Z</published>
    <updated>2018-08-14T15:12:25.457Z</updated>
    
    <content type="html"><![CDATA[<p>重新部署项目后，后台服务只要用到了Redis的全都报错，不知道哪里改动了。</p><p><strong>报错代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool</span><br><span class="line">...</span><br><span class="line">redis.clients.jedis.exceptions.JedisDataException: ERR Client sent AUTH, but no password is set</span><br></pre></td></tr></table></figure><p>解决办法：</p><ol><li>进入redis容器(或服务器上)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it my-redis /bin/bash</span><br></pre></td></tr></table></figure><ol start="2"><li>设置密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; CONFIG SET requirepass &quot;123456&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改服务配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.password=123456</span><br></pre></td></tr></table></figure><ol start="4"><li>重启后台服务</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;重新部署项目后，后台服务只要用到了Redis的全都报错，不知道哪里改动了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报错代码&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="BUG" scheme="https://fairymeee.github.io/categories/BUG/"/>
    
    
      <category term="Redis" scheme="https://fairymeee.github.io/tags/Redis/"/>
    
      <category term="Spring boot" scheme="https://fairymeee.github.io/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS整合CAS</title>
    <link href="https://fairymeee.github.io/2018/05/23/NodeJS%E6%95%B4%E5%90%88CAS/"/>
    <id>https://fairymeee.github.io/2018/05/23/NodeJS整合CAS/</id>
    <published>2018-05-23T03:16:20.000Z</published>
    <updated>2018-08-14T15:12:25.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h1><p>子系统使用NodeJS实现，现需把该子系统整合到已实现的CAS系统中，实现统一控制访问。本文只讲述实现过程中所涉及到的内容，其它内容不做深入研究。</p><p>基于开源项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/TencentWSRD/connect-cas2</span><br></pre></td></tr></table></figure><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h1><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install connect-cas3 --save</span><br></pre></td></tr></table></figure><blockquote><p>这里使用的connect-cas3，也可以直接connect-cas2，可能会有细微的差别。</p></blockquote><h2 id="2-2-涉及特性"><a href="#2-2-涉及特性" class="headerlink" title="2.2 涉及特性"></a>2.2 涉及特性</h2><ol><li>非代理模型下的CAS协议的登入、登出</li><li>单点登出</li></ol><h2 id="2-3-快速开始"><a href="#2-3-快速开始" class="headerlink" title="2.3 快速开始"></a>2.3 快速开始</h2><p>注意：</p><ol><li>务必在使用casClient.core()中间件之前初始化session</li><li>如果需要启用单点登出，并且使用了bodyParser，那么必须在bodyParser之前使用casClient中间件。 因为CAS Client接收单点登出的请求需要拿到一个POST请求的RAW body，而在bodyParser之后并没有办法办到这个事情，因为bodyParser已经把请求拦截了。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> ConnectCas = <span class="built_in">require</span>(<span class="string">'connect-cas3'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> MemoryStore = <span class="built_in">require</span>(<span class="string">'session-memory-store'</span>)(session);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">app.use(cookie_parser());</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">      secret            : <span class="string">'a long secret'</span>,<span class="comment">//自定义</span></span><br><span class="line">      name              : <span class="string">'xxxxxxx.sid'</span>,<span class="comment">//xxxx可替换</span></span><br><span class="line">      resave            : <span class="literal">true</span>,</span><br><span class="line">      saveUninitialized : <span class="literal">false</span>,</span><br><span class="line">      store: <span class="keyword">new</span> MemoryStore()</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> casClient = <span class="keyword">new</span> ConnectCas(&#123;</span><br><span class="line">    debug: <span class="literal">true</span>,</span><br><span class="line">    ignore: [],</span><br><span class="line">    restletIntegration: <span class="literal">null</span>,</span><br><span class="line">    match: [],</span><br><span class="line">    servicePrefix: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">    serverPath: <span class="string">'https://cas-server:8443/cas'</span>,</span><br><span class="line">    paths: &#123;</span><br><span class="line">        validate: <span class="string">'/validate'</span>,</span><br><span class="line">        serviceValidate: <span class="string">'/serviceValidate'</span>,</span><br><span class="line">        proxy: <span class="string">''</span>,</span><br><span class="line">        login: <span class="string">'/login'</span>,</span><br><span class="line">        logout: <span class="string">'/logout'</span>,</span><br><span class="line">        proxyCallback: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    redirect: <span class="literal">true</span>,</span><br><span class="line">    gateway: <span class="literal">false</span>,</span><br><span class="line">    renew: <span class="literal">false</span>,</span><br><span class="line">    ssoff: <span class="literal">true</span>,<span class="comment">// 单点登出配置</span></span><br><span class="line">    slo: <span class="literal">true</span>,<span class="comment">// connect-cas3内的单点登出开关，但没用上</span></span><br><span class="line">    cache: &#123;</span><br><span class="line">        enable: <span class="literal">false</span>,</span><br><span class="line">        ttl: <span class="number">3</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">        filter: []</span><br><span class="line">    &#125;,</span><br><span class="line">    fromAjax: &#123;</span><br><span class="line">        header: <span class="string">'x-client-ajax'</span>,</span><br><span class="line">        status: <span class="number">418</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.use(casClient.core());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登入</span></span><br><span class="line">app.get(<span class="regexp">/\/.*/</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.session.cas.user) &#123;</span><br><span class="line">      <span class="keyword">return</span> next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> username = req.session.cas.user;</span><br><span class="line">    req.session.loggedIn = <span class="literal">true</span>;</span><br><span class="line">    req.session.username = username;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动登出</span></span><br><span class="line">router.get(<span class="string">'/logout'</span>, casClient.logout());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单点登出，cas服务端发出登出请求</span></span><br><span class="line"><span class="comment">// 如果options.ssoff=false，则result=undefined</span></span><br><span class="line">router.post(<span class="string">'/logout'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.body.logoutRequest) &#123;</span><br><span class="line">        next();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> st = req.body.logoutRequest.match(<span class="regexp">/&lt;samlp:SessionIndex&gt;(.*)&lt;\/samlp:SessionIndex&gt;/</span>)[<span class="number">1</span>];</span><br><span class="line">    req.sessionStore.get(st, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result &amp;&amp; result.sid) req.sessionStore.destroy(result.sid);</span><br><span class="line">        req.sessionStore.destroy(st);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(body_parser.json());</span><br><span class="line">app.use(body_parser.urlencoded(&#123; <span class="attr">extended</span> : <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure><h2 id="2-4-其它配置"><a href="#2-4-其它配置" class="headerlink" title="2.4 其它配置"></a>2.4 其它配置</h2><p>请参考<a href="https://github.com/TencentWSRD/connect-cas2/blob/master/README.zh.md" target="_blank" rel="noopener">connect-cas2</a>配置文档</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><h2 id="3-1-登入"><a href="#3-1-登入" class="headerlink" title="3.1 登入"></a>3.1 登入</h2><p>匹配所有路径，实现登入中间件，得到cas返回的user等信息，并处理系统登入后的业务。</p><h2 id="3-2-登出"><a href="#3-2-登出" class="headerlink" title="3.2 登出"></a>3.2 登出</h2><h3 id="3-2-1-手动登出"><a href="#3-2-1-手动登出" class="headerlink" title="3.2.1 手动登出"></a>3.2.1 手动登出</h3><p>使用自带的登出<code>casClient.logout()</code>,下附源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ConnectCas.prototype.logout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = <span class="keyword">this</span>.options;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.session) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">'/'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Forget our own login session</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.session.destroy) &#123;</span><br><span class="line">      req.session.destroy();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Cookie-based sessions have no destroy()</span></span><br><span class="line">      req.session = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send the user to the official campus-wide logout URL</span></span><br><span class="line">    <span class="comment">// utils.getPath: options.serverPath + options.paths.logout + '?service=' + encodeURIComponent(options.servicePrefix + options.paths.validate);</span></span><br><span class="line">    <span class="keyword">return</span> res.redirect(utils.getPath(<span class="string">'logout'</span>, options));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-单点登出"><a href="#3-2-2-单点登出" class="headerlink" title="3.2.2 单点登出"></a>3.2.2 单点登出</h3><p>单点登出没使用自带的，源码写的应该有个拦截器，监听登出请求。</p><p>登出逻辑：</p><ol><li>单独写一个登出<code>/logout</code>路由,并注册到CAS服务端</li><li>拿到CAS服务端发过来的<code>logoutRequest</code>并从中得到st票据</li><li>销毁st票据及session</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1 背景&quot;&gt;&lt;/a&gt;1 背景&lt;/h1&gt;&lt;p&gt;子系统使用NodeJS实现，现需把该子系统整合到已实现的CAS系统中，实现统一控制访问。本文只讲述实现过程中所涉及到的内容，
      
    
    </summary>
    
      <category term="CAS" scheme="https://fairymeee.github.io/categories/CAS/"/>
    
    
      <category term="nodejs" scheme="https://fairymeee.github.io/tags/nodejs/"/>
    
      <category term="cas" scheme="https://fairymeee.github.io/tags/cas/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装RabbitMQ</title>
    <link href="https://fairymeee.github.io/2018/05/07/Ubuntu%E5%AE%89%E8%A3%85RabbitMQ/"/>
    <id>https://fairymeee.github.io/2018/05/07/Ubuntu安装RabbitMQ/</id>
    <published>2018-05-07T14:33:52.000Z</published>
    <updated>2018-08-14T15:12:25.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><h3 id="1-1-添加源"><a href="#1-1-添加源" class="headerlink" title="1.1 添加源"></a>1.1 添加源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'deb http://www.rabbitmq.com/debian/ testing main'</span> | sudo tee /etc/apt/sources.list.d/rabbitmq.list</span><br></pre></td></tr></table></figure><h3 id="1-2-新增公钥（不加会有警告）"><a href="#1-2-新增公钥（不加会有警告）" class="headerlink" title="1.2 新增公钥（不加会有警告）"></a>1.2 新增公钥（不加会有警告）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3 id="1-3-更新源"><a href="#1-3-更新源" class="headerlink" title="1.3 更新源"></a>1.3 更新源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="1-4-安装rabbitmq-server"><a href="#1-4-安装rabbitmq-server" class="headerlink" title="1.4 安装rabbitmq-server"></a>1.4 安装rabbitmq-server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install rabbitmq-server</span><br></pre></td></tr></table></figure><h2 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h2><h3 id="2-1-启动服务"><a href="#2-1-启动服务" class="headerlink" title="2.1 启动服务"></a>2.1 启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/rabbitmq-server start</span><br></pre></td></tr></table></figure><blockquote><p>Usage: /etc/init.d/rabbitmq-server {start|stop|status|rotate-logs|restart|condrestart|try-restart|reload|force-reload}</p></blockquote><h3 id="2-2-查看服务"><a href="#2-2-查看服务" class="headerlink" title="2.2 查看服务"></a>2.2 查看服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><h3 id="3-1-打开管理页面"><a href="#3-1-打开管理页面" class="headerlink" title="3.1 打开管理页面"></a>3.1 打开管理页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><h4 id="3-1-1-查看安装的插件"><a href="#3-1-1-查看安装的插件" class="headerlink" title="3.1.1 查看安装的插件"></a>3.1.1 查看安装的插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmq-plugins list</span><br></pre></td></tr></table></figure><h4 id="3-1-2-查看用户"><a href="#3-1-2-查看用户" class="headerlink" title="3.1.2 查看用户"></a>3.1.2 查看用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl list_users</span><br></pre></td></tr></table></figure><h3 id="3-2-新增管理员用户"><a href="#3-2-新增管理员用户" class="headerlink" title="3.2 新增管理员用户"></a>3.2 新增管理员用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl add_user admin admin </span><br><span class="line">sudo rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><h3 id="3-3-使用新增的账户登陆管理页面"><a href="#3-3-使用新增的账户登陆管理页面" class="headerlink" title="3.3 使用新增的账户登陆管理页面"></a>3.3 使用新增的账户登陆管理页面</h3><p><code>http://127.0.0.1:15672</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1. 安装&quot;&gt;&lt;/a&gt;1. 安装&lt;/h2&gt;&lt;h3 id=&quot;1-1-添加源&quot;&gt;&lt;a href=&quot;#1-1-添加源&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
      <category term="AMQP" scheme="https://fairymeee.github.io/categories/AMQP/"/>
    
    
      <category term="RabbitMQ" scheme="https://fairymeee.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu小技巧</title>
    <link href="https://fairymeee.github.io/2018/05/07/Ubuntu%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://fairymeee.github.io/2018/05/07/Ubuntu小技巧/</id>
    <published>2018-05-07T13:41:47.000Z</published>
    <updated>2018-08-14T15:12:25.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-解决SSH超时断开连接"><a href="#1-解决SSH超时断开连接" class="headerlink" title="1. 解决SSH超时断开连接"></a>1. 解决SSH超时断开连接</h2><ul><li><p>在客户端电脑上编辑（<strong>需要root权限</strong>）<code>/etc/ssh/ssh_config</code>，并添加如下一行：</p><pre><code>ServerAliveInterval 60</code></pre></li></ul><p>此后该系统里的用户连接SSH时，每60秒会发一个KeepAlive请求，避免被踢。</p><h2 id="2-解决-boot分区空间不足"><a href="#2-解决-boot分区空间不足" class="headerlink" title="2.解决/boot分区空间不足"></a>2.解决<code>/boot</code>分区空间不足</h2><ul><li><p>查看系统已安装的内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep linux-image</span><br></pre></td></tr></table></figure></li><li><p>查看当前使用的内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure></li><li><p>删除旧的内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove linux-image-4.13.0-36-generic linux-image-4.13.0-38-generic</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>可保留最近的两个内核版本，其它可全部删除</p></blockquote><ul><li>查看分区使用情况<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -lh</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-解决SSH超时断开连接&quot;&gt;&lt;a href=&quot;#1-解决SSH超时断开连接&quot; class=&quot;headerlink&quot; title=&quot;1. 解决SSH超时断开连接&quot;&gt;&lt;/a&gt;1. 解决SSH超时断开连接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在客户端电脑上编辑（&lt;stro
      
    
    </summary>
    
      <category term="Ubuntu" scheme="https://fairymeee.github.io/categories/Ubuntu/"/>
    
    
      <category term="Linux" scheme="https://fairymeee.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://fairymeee.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Markdown常用语法</title>
    <link href="https://fairymeee.github.io/2018/05/06/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>https://fairymeee.github.io/2018/05/06/Markdown常用语法/</id>
    <published>2018-05-06T14:10:50.000Z</published>
    <updated>2018-08-14T15:12:25.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Markdown-简明语法手册"><a href="#一、Markdown-简明语法手册" class="headerlink" title="一、Markdown 简明语法手册"></a>一、Markdown 简明语法手册</h2><h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p><p>示例：</p><p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p><h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></table></figure><p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p><h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p><p>示例：</p><p>这是去往 <a href="http://fairymeee.github.io">本人博客</a> 的链接。</p><h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p><p>示例：</p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p><p>示例：</p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol><h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p><p>示例：</p><blockquote><p>野火烧不尽，春风吹又生。</p></blockquote><h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p><p>示例：</p><p>让我们聊聊 <code>html</code>。</p><h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8. 代码块"></a>8. 代码块</h3><p>使用 四个缩进空格 表示代码块。</p><p>示例：</p><pre><code>这是一个代码块，此行左侧有四个不可见的空格。</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9. 插入图像"></a>9. 插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p><p>示例：</p><p><img src="/images/favicon-32x32-next.png" alt="博客logo"></p><h2 id="二、Markdown-高阶语法手册"><a href="#二、Markdown-高阶语法手册" class="headerlink" title="二、Markdown 高阶语法手册"></a>二、Markdown 高阶语法手册</h2><h3 id="1-删除线"><a href="#1-删除线" class="headerlink" title="1. 删除线"></a>1. 删除线</h3><p>使用 ~~ 表示删除线。</p><p><del>这是一段错误的文本。</del></p><h3 id="2-加强的代码块"><a href="#2-加强的代码块" class="headerlink" title="2. 加强的代码块"></a>2. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p><p>非代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></table></figure><p>Python 示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure><p>JavaScript 示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* @param n &gt;= 0</span></span><br><span class="line"><span class="comment">* @return the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h3 id="3-表格支持"><a href="#3-表格支持" class="headerlink" title="3. 表格支持"></a>3. 表格支持</h3><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">\$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">\$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">\$1</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="4-定义型列表"><a href="#4-定义型列表" class="headerlink" title="4. 定义型列表"></a>4. 定义型列表</h3><p>名词 1<br>:   定义 1（左侧有一个可见的冒号和四个不可见的空格）</p><p>代码块 2<br>:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p><pre><code>代码块（左侧有八个不可见的空格）</code></pre><h3 id="5-Html-标签"><a href="#5-Html-标签" class="headerlink" title="5. Html 标签"></a>5. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><pre><code>&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;李强&lt;/td&gt;        &lt;td&gt;张明&lt;/td&gt;        &lt;td&gt;王平&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><table><br>    <tr><br>        <th rowspan="2">值班人员</th><br>        <th>星期一</th><br>        <th>星期二</th><br>        <th>星期三</th><br>    </tr><br>    <tr><br>        <td>李强</td><br>        <td>张明</td><br>        <td>王平</td><br>    </tr><br></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Markdown-简明语法手册&quot;&gt;&lt;a href=&quot;#一、Markdown-简明语法手册&quot; class=&quot;headerlink&quot; title=&quot;一、Markdown 简明语法手册&quot;&gt;&lt;/a&gt;一、Markdown 简明语法手册&lt;/h2&gt;&lt;h3 id=&quot;1-斜体和
      
    
    </summary>
    
      <category term="Markdown" scheme="https://fairymeee.github.io/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://fairymeee.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
